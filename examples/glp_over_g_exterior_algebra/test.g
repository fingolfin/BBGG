m := HomalgMatrix( "x0,x0,x1", 1, 3, S );
M := AsGradedLeftPresentation( m, [ 0, 0, 0 ] );
T := TateTest( S );
TM := ApplyFunctor( T, M );
t1 := TM^1;
mat := UnderlyingMatrix( t1 );
M := Source( t1 );
N := Range( t1 );
degrees_M := GeneratorDegrees( M );
degrees_N := GeneratorDegrees( N );
degrees_M := List( degrees_M, i -> Int( String( i ) ) );
degrees_N := List( degrees_N, i -> Int( String( i ) ) );
summands_M := List( degrees_M, d -> GradedFreeLeftPresentation(1,A,[d]) );;
summands_N := List( degrees_N, d -> GradedFreeLeftPresentation(1,A,[d]) );;
L := List( [ 1 .. Length( degrees_M ) ], i -> List( [ 1 .. Length( degrees_N ) ], j -> GradedPresentationMorphism( summands_M[i],HomalgMatrix([ MatElm(m,i,j)],1,1,A), summands_N[j]) ) );;
LogInputTo();
